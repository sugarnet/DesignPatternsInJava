* Motivation
- New to define a new operation on an entire class hierarchy
    eg. make a document model printable to HTML/Markdown

- Do not want to keep modifying every class in the hierarchy
- Need access to the non-common aspects of classes in the hierarchy
- Create an external component to handle rendering
    - But avoid type checks

* Definition
- A pattern where a component (visitor) is allowed to traverse the entire inheritance hierarchy. Implemented by
propagating a single visit() method throughout the entire hierarchy

* Summary
- Propagate an accept(Visitor v) method throughout the entire hierarchy
- Create a visitor with visit(Foo), visit(Bar)... for each element in the hierarchy
- Each accept() simply calls visitor.visit(this)
- Acyclic visitor allows greater flexibility at a cost to performance